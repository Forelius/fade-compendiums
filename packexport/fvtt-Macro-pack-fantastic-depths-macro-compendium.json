{
  "package": "fade-compendiums.macro-compendium",
  "metadata": {
    "name": "macro-compendium",
    "label": "Macro Compendium",
    "path": "modules/fade-compendiums/packs/macros",
    "type": "Macro",
    "system": "fantastic-depths",
    "ownership": {
      "PLAYER": "OBSERVER",
      "ASSISTANT": "OWNER"
    },
    "flags": {},
    "packageType": "module",
    "packageName": "fade-compendiums",
    "id": "fade-compendiums.macro-compendium"
  },
  "type": "Macro",
  "items": [
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type A",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"1d6*1000\", chance: 25 },\n{ type: \"sp\", formula: \"1d6*1000\", chance: 30 },\n{ type: \"ep\", formula: \"1d4*1000\", chance: 20 },\n{ type: \"gp\", formula: \"2d6*1000\", chance: 35 },\n{ type: \"pp\", formula: \"1d2*1000\", chance: 25 },\n{ type: \"gems\", formula: \"6d6\", chance: 50 },\n{ type: \"jewelry\", formula: \"6d6\", chance: 50 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d2\", chance: 10 },\n  { name: \"Magical Items (Basic)\", formula: \"3\", chance: 30 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type A');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "2atM6Qsc9pjRg7zP"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type O",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d3\", chance: 10 },\n  { name: \"Scrolls\", formula: \"1d4\", chance: 50 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type O');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "4njVn9ydGsuupaD9"
    },
    {
      "folder": "82lkvbbc5Yg9Obvr",
      "name": "Treasure Type S",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"gp\", formula: \"2d4\", chance: 100 },\n{ type: \"gems\", formula: \"1\", chance: 5 }\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type S');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "56eVfnQ9M5NIQV0h"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type I",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"pp\", formula: \"1d8*1000\", chance: 30 },\n{ type: \"gems\", formula: \"2d6\", chance: 50 },\n{ type: \"jewelry\", formula: \"2d6\", chance: 50 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d2\", chance: 5 },\n  { name: \"Magical Items (Basic)\", formula: \"1\", chance: 15 },\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type I');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "6VDZITwIXSRqiQ4z"
    },
    {
      "name": "Light Manager",
      "type": "script",
      "command": "//if (game.user.isGM) {\n   game.fade.LightManager.showLightDialog();\n//} else { \n//   ui.notifications.warn(\"Only the GM can use this macro.\");\n//}",
      "img": "icons/magic/light/orb-lightbulb-gray.webp",
      "folder": "g5O0eTAR4mnkX6xk",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723278741,
        "modifiedTime": 1740496349522,
        "lastModifiedBy": "a3HxsdUIMWfuuSdj"
      },
      "_id": "AQ20l9pqGf6y3y3v"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type H",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"3d8*1000\", chance: 25 },\n{ type: \"sp\", formula: \"1d100*1000\", chance: 50 },\n{ type: \"ep\", formula: \"1d4*10000\", chance: 50 },\n{ type: \"gp\", formula: \"1d6*10000\", chance: 50 },\n{ type: \"pp\", formula: \"5d4*1000\", chance: 25 },\n{ type: \"gems\", formula: \"1d100\", chance: 50 },\n{ type: \"jewelry\", formula: \"1d4*10\", chance: 50 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d2\", chance: 10 },\n  { name: \"Magical Items (Basic)\", formula: \"4\", chance: 15 },\n  { name: \"Potions\", formula: \"1\", chance: 15 },\n  { name: \"Scrolls\", formula: \"1\", chance: 15 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type H');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "AutKN8UwET4zhRRH"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type L",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"gems\", formula: \"1d4\", chance: 50 }\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type L');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "CvH1RGATaNb2SVVt"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type D",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"1d8*1000\", chance: 10 },\n{ type: \"sp\", formula: \"2d12*1000\", chance: 15},\n{ type: \"gp\", formula: \"1d6*1000\", chance: 60 },\n{ type: \"gems\", formula: \"1d8\", chance: 30 },\n{ type: \"jewelry\", formula: \"1d8\", chance: 30 }\n];\nconst tableArray = [  \n  { name: \"Special Treasure Table\", formula: \"1d2\", chance: 10 },\n  { name: \"Magical Items (Basic)\", formula: \"2\", chance: 15 },\n  { name: \"Potions\", formula: \"1\", chance: 15 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type D');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "DnTHDbKBaYvNBGEA"
    },
    {
      "folder": "icb4lMQ0OOAVdbW7",
      "name": "Roll Table Helper",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/sundries/gaming/dice-pair-white-green.webp",
      "scope": "global",
      "command": "game.fade.fadeDialog.getRolltableDialog();",
      "flags": {
        "exportSource": {
          "world": "becmirc-dungeons-and-dragons",
          "system": "fantastic-depths",
          "coreVersion": "12.331",
          "systemVersion": "0.7.21-rc.3"
        }
      },
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274725,
        "modifiedTime": 1740843994473,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "DsZ5aPTN8l9bE0KE"
    },
    {
      "name": "Attack",
      "type": "script",
      "command": "game.fade.fadeDialog.getSelectAttackDialog();",
      "img": "icons/svg/combat.svg",
      "folder": "g5O0eTAR4mnkX6xk",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723278741,
        "modifiedTime": 1740496349522,
        "lastModifiedBy": "a3HxsdUIMWfuuSdj"
      },
      "_id": "F4seGOHEQajdS7xq"
    },
    {
      "folder": "KnvGWVgDGttFNMhM",
      "name": "Fix World Actor Spell Class",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/dice-target.svg",
      "scope": "global",
      "command": "(async () => {\n  try {\n    const packs = game.packs.filter(p => p.metadata.type === 'Item');\n    const allClassItems = [];\n\n    // Step 1: Load all class items from all packs\n    for (const pack of packs) {\n      const items = await pack.getDocuments();\n      const classItems = items.filter(item => item.type === 'class');\n      allClassItems.push(...classItems);\n    }\n\n    // Step 2: Build class name lookup map\n    const classLookup = new Map();\n    for (const classItem of allClassItems) {\n      classLookup.set(classItem.name.toLowerCase(), {\n        name: classItem.name,\n        uuid: classItem.uuid\n      });\n    }\n\n    // Step 3: Process all world actors\n    let totalUpdated = 0;\n\n    for (const actor of game.actors.contents) {\n      const updates = [];\n\n      for (const item of actor.items) {\n        if (item.type !== 'spell') continue;\n\n        const tags = item.system?.tags || item.system?.properties || [];\n        const spellClasses = [];\n\n        for (const tag of tags) {\n          const match = classLookup.get(tag.toLowerCase());\n          if (match) {\n            spellClasses.push({ name: match.name, uuid: match.uuid });\n          }\n        }\n\n        // Only update if there are matching classes\n        if (spellClasses.length > 0) {\n          updates.push({\n            _id: item.id,\n            'system.classes': spellClasses\n          });\n        }\n      }\n\n      if (updates.length > 0) {\n        await actor.updateEmbeddedDocuments('Item', updates);\n        console.log(`Updated ${updates.length} spell(s) for actor \"${actor.name}\"`);\n        totalUpdated += updates.length;\n      }\n    }\n\n    ui.notifications.info(`Updated ${totalUpdated} spell items on world actors.`);\n  } catch (error) {\n    console.error('Error updating actor spell items:', error);\n    ui.notifications.error('Failed to update actor spell items. Check console.');\n  }\n})();",
      "flags": {},
      "_stats": {
        "coreVersion": "12.343",
        "systemId": "fantastic-depths",
        "systemVersion": "0.11.0-rc.20",
        "createdTime": 1752069956151,
        "modifiedTime": 1752069956151,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "FZVoe0lT83ZUJegT"
    },
    {
      "folder": "82lkvbbc5Yg9Obvr",
      "name": "Treasure Type P",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"3d8\", chance: 100 }\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type P');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "Hd9sXvnrmr88tTbh"
    },
    {
      "name": "Attack Equipped",
      "type": "script",
      "command": "game.fade.fadeDialog.getSelectAttackDialog(true);",
      "img": "icons/svg/combat.svg",
      "folder": "g5O0eTAR4mnkX6xk",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723278741,
        "modifiedTime": 1740843400476,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "IMsBFlm6sQCBDF99"
    },
    {
      "folder": "icb4lMQ0OOAVdbW7",
      "name": "Shove Resist Calculator",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "systems/fantastic-depths/assets/img/ui/shove.png",
      "scope": "global",
      "command": "game.fade.registry.getSystem('shove').showShoveDialog();",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274725,
        "modifiedTime": 1744464102345,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "J5iTddF72Xh2Zlht"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type F",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"sp\", formula: \"2d10*1000\", chance: 10 },\n{ type: \"ep\", formula: \"1d8*1000\", chance: 20 },\n{ type: \"gp\", formula: \"1d12*1000\", chance: 45 },\n{ type: \"pp\", formula: \"1d3*1000\", chance: 30 },\n{ type: \"gems\", formula: \"2d12\", chance: 20 },\n{ type: \"jewelry\", formula: \"1d12\", chance: 10 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d3\", chance: 20 },\n  { name: \"Scrolls\", formula: \"1\", chance: 30 },\n  { name: \"Potions\", formula: \"1\", chance: 30 },\n  { name: \"Magical Items (No Weapons)\", formula: \"3\", chance: 30 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type F');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "M3EFEeXFLuon2IDE"
    },
    {
      "folder": "8QnG4j2FXrIxRegn",
      "name": "Set Folder Permission",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/eye.svg",
      "scope": "global",
      "command": "new Dialog({\n  title: \"Update Folder and Content Permissions\",\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label for=\"folder-type\">Folder Type:</label>\n        <select id=\"folder-type\" name=\"folder-type\">\n          <option value=\"Actor\">Actor</option>\n          <option value=\"Item\">Item</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"folder-name\">Folder Name:</label>\n        <input type=\"text\" id=\"folder-name\" name=\"folder-name\" placeholder=\"Enter folder name\" />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"permission-level\">Permission Level:</label>\n        <select id=\"permission-level\" name=\"permission-level\">\n          <option value=\"0\">None</option>\n          <option value=\"1\">Limited</option>\n          <option value=\"2\">Observer</option>\n          <option value=\"3\">Owner</option>\n        </select>\n      </div>\n    </form>\n  `,\n  buttons: {\n    apply: {\n      label: \"Update Permissions\",\n      callback: async (html) => {\n        const folderType = html.find('[name=\"folder-type\"]').val();\n        const folderName = html.find('[name=\"folder-name\"]').val();\n        const permissionLevel = parseInt(html.find('[name=\"permission-level\"]').val(), 10);\n\n        if (!folderType || !folderName) {\n          return ui.notifications.error(\"Please provide both a folder type and name.\");\n        }\n\n        const targetFolder = game.folders.find(f => f.type === folderType && f.name === folderName);\n\n        if (!targetFolder) {\n          return ui.notifications.error(`Folder \"${folderName}\" of type \"${folderType}\" not found.`);\n        }\n\n        console.log(\"Target Folder Data:\", targetFolder);\n\n        // Recursive Permission Update for Folders and Their Contents\n        async function updatePermissions(folder, level) {\n          const actualFolder = game.folders.get(folder.id);\n          if (!actualFolder) {\n            console.error(\"Invalid folder encountered:\", folder);\n            return;\n          }\n\n          try {\n            // Update folder permissions\n            await actualFolder.update({ ownership: { default: level } });\n            console.log(`Updated permissions for folder: ${actualFolder.name}`);\n\n            // Update permissions for all items/actors in the folder\n            const contents = folderType === \"Actor\" ? game.actors : game.items;\n            const folderContents = contents.filter(i => i.folder?.id === folder.id);\n            for (const item of folderContents) {\n              await item.update({ ownership: { default: level } });\n              console.log(`Updated permissions for item: ${item.name}`);\n            }\n          } catch (err) {\n            console.error(`Failed to update permissions for folder \"${actualFolder.name}\" or its contents`, err);\n          }\n\n          // Process child folders recursively\n          for (const childWrapper of folder.children) {\n            const childFolder = game.folders.get(childWrapper.folder._id);\n            if (childFolder) {\n              await updatePermissions(childFolder, level);\n            } else {\n              console.error(\"Failed to resolve child folder:\", childWrapper);\n            }\n          }\n        }\n\n        try {\n          await updatePermissions(targetFolder, permissionLevel);\n          ui.notifications.info(`Permissions updated recursively for \"${folderName}\" and its contents.`);\n        } catch (err) {\n          console.error(\"Recursive Update Failed:\", err);\n          ui.notifications.error(\"Recursive update encountered an error. Check the console.\");\n        }\n      }\n    },\n    cancel: {\n      label: \"Cancel\"\n    }\n  },\n  default: \"apply\"\n}).render(true);",
      "flags": {
        "core": {}
      },
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274725,
        "modifiedTime": 1743687205930,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "NlCkDjvrQEzZ0TQx"
    },
    {
      "name": "Roll Abilty Scores 2x3d6kh",
      "type": "script",
      "command": "// JavaScript source code\nlet results = '<h2>Rolling Ability Scores</h2><p>Method: 2x3d6kh</p>';\nlet accum = 0;\nlet rollTotals = []; // Array to store the rolled values\nlet rolls = [];\n\nfor (let i = 0; i < 6; i++) {\n   let roll;\n   do {\n      roll = new Roll('{3d6, 3d6}kh');\n      await roll.evaluate();\n   } while (roll.total < 6);\n   accum += roll.total;\n   rolls.push(roll);\n   rollTotals.push(roll.total); // Store the rolled value\n   let discarded =roll.terms[0].results.find(roll2 => roll2.discarded === true);\n   results += `Roll ${i + 1}: ${roll.total} (${discarded.result})<br>`;\n}\n\n//console.log(results, rolls.map(roll=>roll.terms[0].results.);\n\nlet average = Math.round(accum / 6, 2);\nresults += `<strong>Average:</strong> ${average}<br>`;\n\n// Generate a unique ID for the button\nconst buttonId = `apply-ability-scores-${Date.now()}`; // Unique ID based on timestamp\nresults += `<button id=\"${buttonId}\">Apply to Selected</button>`;\n\nlet chatMessage = await ChatMessage.create({\n   content: results,\n   flavor: 'Ability Score Rolls'\n});\n\n// Function to check for the button and add the event listener\nconst checkForButton = async () => {\n   const button = document.getElementById(buttonId);\n   if (button) {\n      button.addEventListener(\"click\", async () => {\n         const actor = canvas.tokens.controlled[0]?.actor; // Get the selected actor\n         if (!actor) {\n            ui.notifications.warn(\"Please select an actor.\");\n            return;\n         }\n\n         // Get the ability keys from the actor's system.abilities\n         const abilityKeys = Object.keys(actor.system.abilities);\n\n         // Ensure we only apply scores to the first 6 abilities\n         for (let i = 0; i < Math.min(rollTotals.length, abilityKeys.length); i++) {\n            const abilityKey = abilityKeys[i];\n            console.log(`Setting ${actor.name} ${abilityKey} from ${actor.system.abilities[abilityKey].value} to ${rollTotals[i]}.`);\n            await actor.update({\n               [`system.abilities.${abilityKey}.value`]: rollTotals[i]\n            });\n         }\n\n         ui.notifications.info(\"Ability scores applied successfully!\");\n      });\n   } else {\n      console.log('Button not found...');\n      // If the button is not found, check again after a short delay\n      setTimeout(checkForButton, 100); // Check again after 100ms\n   }\n};\n\n// Start checking for the button\ncheckForButton();",
      "img": "systems/fantastic-depths/assets/img//ui/import.webp",
      "folder": "67qKQ0AnYHFK0qmj",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.9.0-rc.17",
        "createdTime": 1744031154486,
        "modifiedTime": 1744031154486,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "OV1vsVfAjFzARAIm"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type N",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d2\", chance: 10 },\n  { name: \"Potions\", formula: \"2d4\", chance: 40}\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type N');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "Obn0d2l4gGmjyeOb"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type E",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"1d10*1000\", chance: 5 },\n{ type: \"sp\", formula: \"2d12*1000\", chance: 30 },\n{ type: \"ep\", formula: \"1d4*1000\", chance: 25 },\n{ type: \"gp\", formula: \"1d8*1000\", chance: 25 },\n{ type: \"gems\", formula: \"1d10\", chance: 10 },\n{ type: \"jewelry\", formula: \"1d10\", chance: 10 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d2\", chance: 15 },\n  { name: \"Magical Items (Basic)\", formula: \"3\", chance: 25 },\n  { name: \"Scrolls\", formula: \"1\", chance: 25 },\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type E');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "PEYByWrSTc5644ki"
    },
    {
      "folder": "82lkvbbc5Yg9Obvr",
      "name": "Treasure Type V",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"sp\", formula: \"1d100\", chance: 10 },\n{ type: \"ep\", formula: \"1d100\", chance: 5 },\n{ type: \"gp\", formula: \"2d100\", chance: 10 },\n{ type: \"pp\", formula: \"1d100\", chance: 5 },\n{ type: \"gems\", formula: \"1d2\", chance: 10 },\n{ type: \"jewelry\", formula: \"1d4\", chance: 10 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1\", chance: 5 },\n  { name: \"Magical Items (Basic)\", formula: \"1\", chance: 5 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type V');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "QDOQM7Lz7VOWjf78"
    },
    {
      "folder": "82lkvbbc5Yg9Obvr",
      "name": "Treasure Type Q",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"sp\", formula: \"3d6\", chance: 100 }\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type Q');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "Sr9WIltxV5HXO9hQ"
    },
    {
      "folder": "8QnG4j2FXrIxRegn",
      "name": "Import All Compendiums",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/book.svg",
      "scope": "global",
      "command": "game.fade.DataMigrator.importCompendiums()",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.8.1-rc.9",
        "createdTime": 1741532342193,
        "modifiedTime": 1743687205930,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "URYJrBuH7cELL2LS"
    },
    {
      "folder": "82lkvbbc5Yg9Obvr",
      "name": "Treasure Type U",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"1d100\", chance: 10 },\n{ type: \"sp\", formula: \"1d100\", chance: 10 },\n{ type: \"gp\", formula: \"1d*100\", chance: 5 },\n{ type: \"gems\", formula: \"1d2\", chance: 5 },\n{ type: \"jewelry\", formula: \"1d4\", chance: 5 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1\", chance: 2 },\n  { name: \"Magical Items (Basic)\", formula: \"1\", chance: 2 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type U');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "WICythACRU4vWqnU"
    },
    {
      "folder": "icb4lMQ0OOAVdbW7",
      "name": "Wrestling Contest",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "systems/fantastic-depths/assets/img/ui/wrestling.webp",
      "scope": "global",
      "command": "game.fade.registry.getSystem('wrestling').showWrestlingDialog();",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274725,
        "modifiedTime": 1744462627858,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "YG1pkk6CQQEnHs3M"
    },
    {
      "folder": "82lkvbbc5Yg9Obvr",
      "name": "Treasure Type T",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"pp\", formula: \"1d6\", chance: 100 },\n{ type: \"gems\", formula: \"1\", chance: 5 }\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type T');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "ZXkP60KPMPmhUTQo"
    },
    {
      "folder": "8QnG4j2FXrIxRegn",
      "name": "Set Monster Darkvision",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/dice-target.svg",
      "scope": "global",
      "command": "(async () => {\n  // Get all world actors with type \"monster\"\n  const monsterActors = game.actors.filter(actor => actor.type === \"monster\");\n  if (!monsterActors.length) {\n    return ui.notifications.info(\"No monster actors found in the world.\");\n  }\n\n  // Define the desired sight settings\n  const sightData = {\n    angle: 360,\n    attenuation: 0,\n    brightness: 0,\n    color: null,\n    contrast: 0,\n    enabled: true,\n    range: 60,\n    saturation: -1,\n    visionMode: \"darkvision\"\n  };\n\n  // Process each monster actor's prototype token\n  for (const actor of monsterActors) {\n    // Retrieve current detection modes from the prototype token (if any)\n    let detectionModes = foundry.utils.duplicate(actor.prototypeToken?.detectionModes) || [];\n    \n    // Look for an existing detection mode with id \"basicSight\"\n    const idx = detectionModes.findIndex(dm => dm.id === \"basicSight\");\n    if (idx === -1) {\n      // Not found: add a new detection mode entry\n      detectionModes.push({ id: \"basicSight\", label: \"Basic Sight\", range: 60 });\n    } else {\n      // Found: update its range to 60\n      detectionModes[idx].range = 60;\n    }\n\n    // Update the actor's prototype token with the new sight and detection mode settings\n    await actor.update({\n      prototypeToken: {\n        sight: sightData,\n        detectionModes: detectionModes\n      }\n    });\n    console.log(`Updated actor \"${actor.name}\"`);\n  }\n\n  ui.notifications.info(`Updated ${monsterActors.length} monster actor(s).`);\n})();",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739754527579,
        "modifiedTime": 1743687205930,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "agzIfMrCrUnExIec"
    },
    {
      "folder": "82lkvbbc5Yg9Obvr",
      "name": "Treasure Type R",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"ep\", formula: \"2d6\", chance: 100 }\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type R');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "bRKmjmRZsHgY2kSf"
    },
    {
      "folder": "8QnG4j2FXrIxRegn",
      "name": "Class Clear",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/dice-target.svg",
      "scope": "global",
      "command": "// Prompt for actor name and class\nlet actorName = await new Promise(resolve => {\n    new Dialog({\n        title: \"Clear Class Data\",\n        content: `\n            <form>\n                <div class=\"form-group\">\n                    <label>Actor Name</label>\n                    <input type=\"text\" id=\"actor-name\" name=\"actor-name\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label>Class Name</label>\n                    <input type=\"text\" id=\"class-name\" name=\"class-name\" required>\n                </div>\n            </form>\n        `,\n        buttons: {\n            ok: {\n                label: \"Submit\",\n                callback: html => {\n                    const name = html.find(\"#actor-name\").val();\n                    const className = html.find(\"#class-name\").val();\n                    resolve({ name, className });\n                }\n            }\n        },\n        default: \"ok\",\n        close: () => resolve(null)\n    }).render(true);\n});\n\n// Check if the user provided input\nif (actorName) {\n    const { name, className } = actorName;\n\n    // Get the actor by name\n    const actor = game.actors.getName(name);\n    if (actor) {\n        // Call the method to clear class data\n        await actor.clearClassData(className);\n        ui.notifications.info(`Cleared class data for ${name} - ${className}`);\n    } else {\n        ui.notifications.error(`Actor \"${name}\" not found.`);\n    }\n}",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.9.0-rc.15",
        "createdTime": 1743687205915,
        "modifiedTime": 1743687205930,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "g51y20CR2Zemnelv"
    },
    {
      "name": "Open Party Tracker",
      "type": "script",
      "command": "if (game.user.isGM) {\n   if (!window.partyTracker) window.partyTracker= new game.fade.PartyTrackerForm();\n   if (window.partyTracker.rendered) window.partyTracker.close();\n   else window.partyTracker.render(true);\n} else { \n   ui.notifications.warn(\"Only the GM can open the Party Tracker.\");\n}",
      "img": "icons/skills/melee/weapons-crossed-swords-black-gray.webp",
      "folder": "icb4lMQ0OOAVdbW7",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274725,
        "modifiedTime": 1737723274725,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "kSaeRBnb4YeCIHjZ"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type C",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"1d12*1000\", chance: 20 },\n{ type: \"sp\", formula: \"1d4*1000\", chance: 30 },\n{ type: \"ep\", formula: \"1d4*1000\", chance: 10 },\n{ type: \"gems\", formula: \"1d4\", chance: 25},\n{ type: \"jewelry\", formula: \"1d4\", chance: 25 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d2\", chance: 5 },\n  { name: \"Magical Items (Basic)\", formula: \"2\", chance: 10 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type C');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "khlUOFK8MWp08Cu5"
    },
    {
      "name": "Cast Spell",
      "type": "script",
      "command": "game.fade.fadeDialog.getSelectSpellDialog();",
      "img": "icons/svg/daze.svg",
      "folder": "g5O0eTAR4mnkX6xk",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723278741,
        "modifiedTime": 1740496349522,
        "lastModifiedBy": "a3HxsdUIMWfuuSdj"
      },
      "_id": "lVE2Mjh2DYkSvnne"
    },
    {
      "folder": "8QnG4j2FXrIxRegn",
      "name": "Character XP Needed",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/up.svg",
      "scope": "global",
      "command": "// Foundry VTT v12 Macro: Compact XP Layout with Commas\n(async () => {\n  // Grab all 'class' items from the World\n  const classItems = game.items.filter(i => i.type === \"class\");\n\n  let output = \"<h2>XP Needed</h2><ul>\";\n\n  for (const token of canvas.tokens.placeables) {\n    const actor = token.actor;\n    if (!actor || actor.type !== \"character\") continue;\n\n    const className = actor.system?.details?.class;\n    const level = actor.system?.details?.level ?? 1;\n    if (!className) continue;\n\n    // Find the matching class item\n    const classItem = classItems.find(i => i.name === className);\n    if (!classItem) {\n      console.warn(`No class item found for: ${className}`);\n      continue;\n    }\n\n    // Pull the \"levels\" array\n    const levelsArray = classItem.system?.levels ?? [];\n    const currentLevelData = levelsArray.find(l => l.level === level);\n    if (!currentLevelData) {\n      console.warn(`No level data for level ${level} in class ${className}`);\n      continue;\n    }\n\n    // Determine prevXP (0 if level=1, else XP of (level-1))\n    let prevXP = 0;\n    if (level > 1) {\n      const prevLevelData = levelsArray.find(l => l.level === (level - 1));\n      if (prevLevelData) prevXP = prevLevelData.xp;\n    }\n\n    // Determine nextXP (if it exists)\n    const nextLevelData = levelsArray.find(l => l.level === (level + 1));\n    if (!nextLevelData) {\n      // Possibly max level\n      output += `\n        <li><strong>${actor.name}</strong> (Level ${level}):\n          No higher level data (max level?)\n        </li>`;\n      continue;\n    }\n\n    const nextXP = nextLevelData.xp;\n    const difference = nextXP - prevXP;\n    const oneTwentieth = Math.floor(difference / 20);\n\n    // Use toLocaleString() to add commas\n    const currentXPStr    = actor.system.details.xp.value.toLocaleString();\n    const nextXPStr       = nextXP.toLocaleString();\n    const differenceStr   = difference.toLocaleString();\n    const oneTwentiethStr = oneTwentieth.toLocaleString();\n\n    // Format a single line of info\n    output += `\n      <li>\n        <strong>${actor.name}</strong> (Level ${level}/XP ${currentXPStr})<br/>\n        Next XP: ${nextXPStr} |\n        Needed: ${differenceStr}<br/>\n        1/20: <strong>${oneTwentiethStr}</strong>\n      </li>`;\n  }\n\n  output += \"</ul>\";\n\n  // Whisper to GM(s)\n  ChatMessage.create({\n    content: output,\n    whisper: ChatMessage.getWhisperRecipients(\"GM\")\n  });\n})();",
      "flags": {
        "exportSource": {
          "world": "becmirc-dungeons-and-dragons",
          "system": "fantastic-depths",
          "coreVersion": "12.331",
          "systemVersion": "0.7.21-rc.3"
        }
      },
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.4",
        "createdTime": 1737905534237,
        "modifiedTime": 1743687205930,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "m7uUovHzOsqO1V1Q"
    },
    {
      "name": "Open Turn Tracker",
      "type": "script",
      "command": "if (game.user.isGM) {\n   if (!window.turnTracker) window.turnTracker = new game.fade.TurnTrackerForm();\n   if (window.turnTracker.rendered) window.turnTracker.close();\n   else window.turnTracker.render(true);\n} else { \n   ui.notifications.warn(\"Only the GM can open the Turn Tracker.\");\n}",
      "img": "icons/magic/time/clock-analog-gray.webp",
      "folder": "icb4lMQ0OOAVdbW7",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274725,
        "modifiedTime": 1737723274725,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "mgOC37r8GjKZKKGX"
    },
    {
      "folder": "g5O0eTAR4mnkX6xk",
      "name": "Player Combat",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/skills/melee/hand-grip-sword-strike-orange.webp",
      "scope": "global",
      "command": "game.fade.PlayerCombatForm.toggleCombatForm();",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723278741,
        "modifiedTime": 1740496349522,
        "lastModifiedBy": "a3HxsdUIMWfuuSdj"
      },
      "_id": "nSwIqrP1t00KBE1C"
    },
    {
      "folder": "KnvGWVgDGttFNMhM",
      "name": "Fix Actor Class Key",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/dice-target.svg",
      "scope": "global",
      "command": "// This is for single-class system only.\nfor (const actor of game.actors.contents) {\n  if (actor.type !== \"character\") continue;\n\n  await game.fade.registry\n    .getSystem(\"classSystem\")\n    .onCharacterActorUpdate(actor, {\n      system: {\n        details: {\n          class: \"test\"\n        }\n      }\n    }, true);\n}",
      "flags": {},
      "_stats": {
        "coreVersion": "12.343",
        "systemId": "fantastic-depths",
        "systemVersion": "0.11.0-rc.20",
        "createdTime": 1752069956151,
        "modifiedTime": 1752069956151,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "ntO5Z73Mv2s4lVOr"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type G",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"gp\", formula: \"1d4*10000\", chance: 50 },\n{ type: \"pp\", formula: \"1d6*1000\", chance: 50 },\n{ type: \"gems\", formula: \"3d6\", chance: 25 },\n{ type: \"jewelry\", formula: \"1d10\", chance: 25 }\n];\nconst tableArray = [\n  { name: \"Special Treasure Table\", formula: \"1d3\", chance: 30 },\n  { name: \"Magical Items (Basic)\", formula: \"4\", chance: 35 },\n  { name: \"Scrolls\", formula: \"1\", chance: 35 }\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type G');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "ntaTVdMcYuNI35Th"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type K",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"sp\", formula: \"1d6*1000\", chance: 30 },\n{ type: \"ep\", formula: \"1d4*1000\", chance: 20 },\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type K');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "o54ackcweB2pHqmp"
    },
    {
      "folder": "g5O0eTAR4mnkX6xk",
      "name": "Roll Special Ability",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/dice-target.svg",
      "scope": "global",
      "command": "game.fade.fadeDialog.getSpecialAbilityDialog();",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.8.1-rc.1",
        "createdTime": 1740844982711,
        "modifiedTime": 1740846322692,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "oLlGN90FRoNhLZA7"
    },
    {
      "name": "Set Token Display Mode",
      "type": "script",
      "command": "(async () => {\n  // Define the resource key for HP\n  const hpResourceKey = \"hp\";\n\n  // Map of display mode options using Foundry's constants\n  const displayModeOptions = {\n    [CONST.TOKEN_DISPLAY_MODES.NONE]: \"None\",\n    [CONST.TOKEN_DISPLAY_MODES.HOVER]: \"Hovered by Anyone\",\n    [CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER]: \"Hovered by Owner\",\n    [CONST.TOKEN_DISPLAY_MODES.CONTROL]: \"Controlled\",\n    [CONST.TOKEN_DISPLAY_MODES.OWNER]: \"Always for Owner\",\n    [CONST.TOKEN_DISPLAY_MODES.ALWAYS]: \"Always for Anyone\"\n  };\n\n  // Map of token selection options\n  const tokenFilterOptions = {\n    all: \"All Tokens on Canvas\",\n    friendly: \"Friendly Tokens\",\n    hostile: \"Hostile Tokens\",\n    selected: \"Selected Tokens\"\n  };\n\n  // Create a dialog to let the user select options\n  const content = `\n    <form>\n      <div class=\"form-group\">\n        <label for=\"display-mode\">Choose Display Mode:</label>\n        <select id=\"display-mode\" name=\"display-mode\">\n          ${Object.entries(displayModeOptions)\n            .map(([value, label]) => `<option value=\"${value}\">${label}</option>`)\n            .join(\"\")}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"token-filter\">Choose Token Filter:</label>\n        <select id=\"token-filter\" name=\"token-filter\">\n          ${Object.entries(tokenFilterOptions)\n            .map(([value, label]) => `<option value=\"${value}\">${label}</option>`)\n            .join(\"\")}\n        </select>\n      </div>\n    </form>\n  `;\n\n  // Display the dialog\n  new Dialog({\n    title: \"Set Token Display Mode and Filter\",\n    content,\n    buttons: {\n      apply: {\n        label: \"Apply\",\n        callback: async (html) => {\n          const selectedMode = parseInt(html.find(\"#display-mode\").val(), 10);\n          const tokenFilter = html.find(\"#token-filter\").val();\n\n          // Filter tokens based on the user's choice\n          let tokensToUpdate = [];\n          switch (tokenFilter) {\n            case \"all\":\n              tokensToUpdate = canvas.tokens.placeables;\n              break;\n            case \"friendly\":\n              tokensToUpdate = canvas.tokens.placeables.filter(t => t.document.disposition === CONST.TOKEN_DISPOSITIONS.FRIENDLY);\n              break;\n            case \"hostile\":\n              tokensToUpdate = canvas.tokens.placeables.filter(t => t.document.disposition === CONST.TOKEN_DISPOSITIONS.HOSTILE);\n              break;\n            case \"selected\":\n              tokensToUpdate = canvas.tokens.controlled;\n              break;\n          }\n\n          // Prepare updates for the filtered tokens\n          const updates = tokensToUpdate.map(token => ({\n            _id: token.id,\n            \"bar1.attribute\": hpResourceKey,\n            displayBars: selectedMode\n          }));\n\n          // Apply the updates\n          if (updates.length > 0) {\n            await canvas.scene.updateEmbeddedDocuments(\"Token\", updates);\n            ui.notifications.info(\n              `Updated ${updates.length} token(s) to display HP bars with mode: ${displayModeOptions[selectedMode]}.`\n            );\n          } else {\n            ui.notifications.warn(\"No tokens matched the selected filter.\");\n          }\n        }\n      },\n      cancel: {\n        label: \"Cancel\",\n        callback: () => ui.notifications.info(\"Operation canceled.\")\n      }\n    },\n    default: \"apply\"\n  }).render(true);\n})();",
      "img": "icons/svg/dice-target.svg",
      "folder": "8QnG4j2FXrIxRegn",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274725,
        "modifiedTime": 1743687205930,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "oMQVwxdNH6SRdNrN"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type M",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"gp\", formula: \"2d4*1000\", chance: 40 },\n{ type: \"pp\", formula: \"3d10*1000\", chance: 50 },\n{ type: \"gems\", formula: \"5d4\", chance: 55 },\n{ type: \"jewelry\", formula: \"2d6\", chance: 45 }\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type M');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "rFYBVzY0DXnfFyqc"
    },
    {
      "name": "Set Prototype Token HP Display Mode",
      "type": "script",
      "command": "(async () => {\n  // Define the resource key for HP\n  const hpResourceKey = \"hp\";\n\n  // Map of display mode options using Foundry's constants\n  const displayModeOptions = {\n    [CONST.TOKEN_DISPLAY_MODES.NONE]: \"None\",\n    [CONST.TOKEN_DISPLAY_MODES.HOVER]: \"Hovered by Anyone\",\n    [CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER]: \"Hovered by Owner\",\n    [CONST.TOKEN_DISPLAY_MODES.CONTROL]: \"Controlled\",\n    [CONST.TOKEN_DISPLAY_MODES.OWNER]: \"Always for Owner\",\n    [CONST.TOKEN_DISPLAY_MODES.ALWAYS]: \"Always for Anyone\"\n  };\n\n  // Create a dialog to let the user select the display mode\n  const content = `\n    <form>\n      <div class=\"form-group\">\n        <label for=\"display-mode\">Choose Display Mode:</label>\n        <select id=\"display-mode\" name=\"display-mode\">\n          ${Object.entries(displayModeOptions)\n            .map(([value, label]) => `<option value=\"${value}\">${label}</option>`)\n            .join(\"\")}\n        </select>\n      </div>\n    </form>\n  `;\n\n  // Display the dialog\n  new Dialog({\n    title: \"Set Prototype Token HP Display Mode\",\n    content,\n    buttons: {\n      apply: {\n        label: \"Apply\",\n        callback: async (html) => {\n          const selectedMode = parseInt(html.find(\"#display-mode\").val(), 10);\n\n          // Update all prototype tokens of world actors\n          const updates = game.actors.map(actor => ({\n            _id: actor.id,\n            \"prototypeToken.bar1.attribute\": hpResourceKey,\n            \"prototypeToken.displayBars\": selectedMode\n          }));\n\n          if (updates.length > 0) {\n            await Actor.updateDocuments(updates);\n            ui.notifications.info(`Updated ${updates.length} actor(s) prototype tokens with the selected display mode.`);\n          } else {\n            ui.notifications.warn(\"No actors found to update.\");\n          }\n        }\n      },\n      cancel: {\n        label: \"Cancel\",\n        callback: () => ui.notifications.info(\"Operation canceled.\")\n      }\n    },\n    default: \"apply\"\n  }).render(true);\n})();",
      "img": "icons/svg/dice-target.svg",
      "author": "0eyrbleKg5gmY59g",
      "scope": "global",
      "folder": "8QnG4j2FXrIxRegn",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274725,
        "modifiedTime": 1743687205930,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "s9CtJzfYxfohqgid"
    },
    {
      "name": "Roll Abilty Scores 3d6",
      "type": "script",
      "command": "let results = '<h2>Rolling Ability Scores</h2><p>Method: 3d6</p>'; \nlet accum = 0; \nlet rolls = []; // Array to store the rolled values\n\nfor (let i = 0; i < 6; i++) { \n    let roll; \n    do {   \n        roll = new Roll('3d6');   \n        await roll.evaluate(); \n    } while (roll.total < 6); \n    accum += roll.total; \n    rolls.push(roll.total); // Store the rolled value\n    results += `Roll ${i + 1}: ${roll.total}<br>`; \n} \n\nlet average = Math.round(accum / 6, 2); \nresults += `<strong>Average:</strong> ${average}<br>`; \n\n// Generate a unique ID for the button\nconst buttonId = `apply-ability-scores-${Date.now()}`; // Unique ID based on timestamp\nresults += `<button id=\"${buttonId}\">Apply to Selected</button>`;\n\nlet chatMessage = await ChatMessage.create({\n    content: results,\n    flavor: 'Ability Score Rolls'\n});\n\n// Function to check for the button and add the event listener\nconst checkForButton = async () => {\n    const button = document.getElementById(buttonId);\n    if (button) {\n        button.addEventListener(\"click\", async () => {\n            const actor = canvas.tokens.controlled[0]?.actor; // Get the selected actor\n            if (!actor) {\n                ui.notifications.warn(\"Please select an actor.\");\n                return;\n            }\n\n            // Get the ability keys from the actor's system.abilities\n            const abilityKeys = Object.keys(actor.system.abilities);\n            \n            // Ensure we only apply scores to the first 6 abilities\n            for (let i = 0; i < Math.min(rolls.length, abilityKeys.length); i++) {\n                const abilityKey = abilityKeys[i];\n                console.log(`Setting ${actor.name} ${abilityKey} from ${actor.system.abilities[abilityKey].value} to ${rolls[i]}.`);\n                await actor.update({\n                    [`system.abilities.${abilityKey}.value`]: rolls[i]\n                });\n            }\n\n            ui.notifications.info(\"Ability scores applied successfully!\");\n        });\n    } else {\n        console.log('Button not found...');\n        // If the button is not found, check again after a short delay\n        setTimeout(checkForButton, 100); // Check again after 100ms\n    }\n};\n\n// Start checking for the button\ncheckForButton();",
      "img": "systems/fantastic-depths/assets/img//ui/import.webp",
      "folder": "67qKQ0AnYHFK0qmj",
      "author": "a3HxsdUIMWfuuSdj",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.10",
        "createdTime": 1740496349505,
        "modifiedTime": 1742217907337,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "sn4Nwrt1XTIFSXdy"
    },
    {
      "folder": "KnvGWVgDGttFNMhM",
      "name": "Fix Pack Spell Class",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/svg/dice-target.svg",
      "scope": "global",
      "command": "(async () => {\n  try {\n    const packs = game.packs.filter(pack => pack.metadata.type === 'Item');\n    const allClassItems = [];\n\n    // Step 1: Load all class items\n    for (const pack of packs) {\n      const items = await pack.getDocuments();\n      const classItems = items.filter(item => item.type === 'class');\n      allClassItems.push(...classItems);\n    }\n\n    // Step 2: Create class name lookup map\n    const classLookup = new Map();\n    for (const classItem of allClassItems) {\n      classLookup.set(classItem.name.toLowerCase(), {\n        name: classItem.name,\n        uuid: classItem.uuid\n      });\n    }\n\n    // Step 3: Process each pack's spells\n    for (const pack of packs) {\n      if (pack.locked) {\n        console.warn(`Skipping locked pack: ${pack.metadata.label}`);\n        continue;\n      }\n\n      const items = await pack.getDocuments();\n      const spellsToUpdate = [];\n\n      for (const spell of items) {\n        if (spell.type !== 'spell') continue;\n\n        const tags = spell.system?.tags || spell.system?.properties || [];\n        const spellClasses = [];\n\n        for (const tag of tags) {\n          const match = classLookup.get(tag.toLowerCase());\n          if (match) {\n            spellClasses.push({ name: match.name, uuid: match.uuid });\n          }\n        }\n\n        // Only update if there's a change\n        if (spellClasses.length > 0) {\n          spellsToUpdate.push({\n            _id: spell.id,\n            'system.classes': spellClasses\n          });\n        }\n      }\n\n      if (spellsToUpdate.length > 0) {\n        console.log(`Updating ${spellsToUpdate.length} spells in ${pack.metadata.label}`);\n        await pack.documentClass.updateDocuments(spellsToUpdate, { pack: pack.collection });\n      }\n    }\n\n    ui.notifications.info('Spell class assignments complete.');\n  } catch (error) {\n    console.error('Error updating spell classes in compendiums:', error);\n    ui.notifications.error('Failed to update spell classes. Check console.');\n  }\n})();",
      "flags": {},
      "_stats": {
        "coreVersion": "12.343",
        "systemId": "fantastic-depths",
        "systemVersion": "0.11.0-rc.20",
        "createdTime": 1752069956151,
        "modifiedTime": 1752069956151,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "sxxCksJXBeMZe1n1"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type J",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"1d4*1000\", chance: 25 },\n{ type: \"sp\", formula: \"1d3*1000\", chance: 10 }\n];\nconst tableArray = [];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type J');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "vQw5vaMhS54K0iLm"
    },
    {
      "name": "Roll Abilty Scores 4d6kh",
      "type": "script",
      "command": "let results = '<h2>Rolling Ability Scores</h2><p>Method: 4d6 keep highest 3</p>'; \nlet accum = 0; \nlet rolls = []; // Array to store the rolled values\n\nfor (let i = 0; i < 6; i++) { \n    let roll; \n    do {   \n        roll = new Roll('4d6kh3');   \n        await roll.evaluate(); \n    } while (roll.total < 6); \n    accum += roll.total; \n    rolls.push(roll.total); // Store the rolled value\n    results += `Roll ${i + 1}: ${roll.total}<br>`; \n} \n\nlet average = Math.round(accum / 6, 2); \nresults += `<strong>Average:</strong> ${average}<br>`; \n\n// Generate a unique ID for the button\nconst buttonId = `apply-ability-scores-${Date.now()}`; // Unique ID based on timestamp\nresults += `<button id=\"${buttonId}\">Apply to Selected</button>`;\n\nlet chatMessage = await ChatMessage.create({\n    content: results,\n    flavor: 'Ability Score Rolls'\n});\n\n// Function to check for the button and add the event listener\nconst checkForButton = async () => {\n    const button = document.getElementById(buttonId);\n    if (button) {\n        button.addEventListener(\"click\", async () => {\n            const actor = canvas.tokens.controlled[0]?.actor; // Get the selected actor\n            if (!actor) {\n                ui.notifications.warn(\"Please select an actor.\");\n                return;\n            }\n\n            // Get the ability keys from the actor's system.abilities\n            const abilityKeys = Object.keys(actor.system.abilities);\n            \n            // Ensure we only apply scores to the first 6 abilities\n            for (let i = 0; i < Math.min(rolls.length, abilityKeys.length); i++) {\n                const abilityKey = abilityKeys[i];\n                console.log(`Setting ${actor.name} ${abilityKey} from ${actor.system.abilities[abilityKey].value} to ${rolls[i]}.`);\n                await actor.update({\n                    [`system.abilities.${abilityKey}.value`]: rolls[i]\n                });\n            }\n\n            ui.notifications.info(\"Ability scores applied successfully!\");\n        });\n    } else {\n        // If the button is not found, check again after a short delay\n        setTimeout(checkForButton, 100); // Check again after 100ms\n    }\n};\n\n// Start checking for the button\ncheckForButton();",
      "img": "systems/fantastic-depths/assets/img//ui/import.webp",
      "folder": "67qKQ0AnYHFK0qmj",
      "author": "a3HxsdUIMWfuuSdj",
      "scope": "global",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.10",
        "createdTime": 1740495693856,
        "modifiedTime": 1742217909480,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "yUHDEvDvszTJwoxx"
    },
    {
      "folder": "S7Cp6NiLZ2Askw5G",
      "name": "Treasure Type B",
      "type": "script",
      "author": "0eyrbleKg5gmY59g",
      "img": "icons/containers/chest/chest-reinforced-steel-oak-tan.webp",
      "scope": "global",
      "command": "const treasure = new game.fade.fadeTreasure();\nconst coinsArray = [\n{ type: \"cp\", formula: \"1d8*1000\", chance: 50 },\n{ type: \"sp\", formula: \"1d6*1000\", chance: 25 },\n{ type: \"ep\", formula: \"1d4*1000\", chance: 25 },\n{ type: \"gp\", formula: \"1d3*1000\", chance: 35 },\n{ type: \"gems\", formula: \"1d6\", chance: 25 },\n{ type: \"jewelry\", formula: \"1d6\", chance: 25 }\n];\nconst tableArray = [\n  { name: \"Sword, Weapon or Armor (Basic)\", formula: \"1\", chance: 10 },\n];\n// Call the method\nawait treasure.rollMultipleTables(coinsArray, tableArray, 'Treasure Type B');",
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140723,
        "modifiedTime": 1739916140723,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "zK2d1Creag9WQX1c"
    }
  ],
  "source": {
    "world": "fantastic-depths",
    "system": "fantastic-depths",
    "version": {
      "core": "12.343",
      "system": "0.14.0-rc.1"
    }
  },
  "folders": [
    {
      "name": "Character Creation",
      "sorting": "a",
      "folder": "g5O0eTAR4mnkX6xk",
      "type": "Macro",
      "description": "",
      "color": null,
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.8.2-rc.2",
        "createdTime": 1742217904089,
        "modifiedTime": 1742217904089,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "67qKQ0AnYHFK0qmj"
    },
    {
      "name": "Carried",
      "sorting": "a",
      "folder": "xbjnUXrbocDYsbcS",
      "type": "Macro",
      "description": "",
      "color": null,
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140704,
        "modifiedTime": 1739916140704,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "82lkvbbc5Yg9Obvr"
    },
    {
      "name": "Utility",
      "sorting": "a",
      "folder": "icb4lMQ0OOAVdbW7",
      "type": "Macro",
      "description": "",
      "color": null,
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274693,
        "modifiedTime": 1737723274693,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "8QnG4j2FXrIxRegn"
    },
    {
      "name": "Lair",
      "sorting": "a",
      "folder": "xbjnUXrbocDYsbcS",
      "type": "Macro",
      "description": "",
      "color": null,
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140704,
        "modifiedTime": 1739916140704,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "S7Cp6NiLZ2Askw5G"
    },
    {
      "name": "Misc",
      "type": "Macro",
      "description": "",
      "folder": null,
      "sorting": "a",
      "color": null,
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723278720,
        "modifiedTime": 1737723278764,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "g5O0eTAR4mnkX6xk"
    },
    {
      "name": "GM Only",
      "type": "Macro",
      "description": "",
      "folder": null,
      "sorting": "a",
      "color": null,
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.21-rc.3",
        "createdTime": 1737723274693,
        "modifiedTime": 1737723274693,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "icb4lMQ0OOAVdbW7"
    },
    {
      "name": "Treasure",
      "sorting": "a",
      "folder": "icb4lMQ0OOAVdbW7",
      "type": "Macro",
      "description": "",
      "color": null,
      "flags": {},
      "_stats": {
        "coreVersion": "12.331",
        "systemId": "fantastic-depths",
        "systemVersion": "0.7.22-rc.4",
        "createdTime": 1739916140704,
        "modifiedTime": 1739916140745,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "xbjnUXrbocDYsbcS"
    },
    {
      "name": "Multi-Class Fixes",
      "sorting": "a",
      "folder": "icb4lMQ0OOAVdbW7",
      "type": "Macro",
      "description": "",
      "color": null,
      "flags": {},
      "_stats": {
        "coreVersion": "12.343",
        "systemId": "fantastic-depths",
        "systemVersion": "0.11.0-rc.20",
        "createdTime": 1752069956143,
        "modifiedTime": 1752069956164,
        "lastModifiedBy": "0eyrbleKg5gmY59g"
      },
      "_id": "KnvGWVgDGttFNMhM"
    }
  ],
  "folder": {
    "id": "vJGXE6Gc3dmtwujx",
    "name": "FaDe Compendiums"
  }
}